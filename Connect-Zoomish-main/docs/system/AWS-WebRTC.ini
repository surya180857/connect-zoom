I'll help you check for WebRTC-related services (STUN, TURN, Signaling) on this Ubuntu VM and examine their configurations. Let me create a systematic plan to investigate this.
Check running processes for WebRTC services
Check installed packages
Check systemd services
Check listening ports
Examine configuration files
Check for custom WebRTC applications
Let me start by checking for running processes and listening ports that might indicate WebRTC services:
systemctl list-units --type=service --state=active | grep -E "(webrtc|stun|turn|coturn|janus|kurento|signaling)" || echo "No WebRTC-related systemd services found"
  aira.service                                   loaded active running AIRA app + signaling
Now let me check what's running on ports 80 and 443 and examine the aira application:
Let me also check the package.json to understand the AIRA application dependencies:
Completed Check systemd services (3/6), Check listening ports (4/6), Examine configuration files (5/6), Check for custom WebRTC applications (6/6)


ps aux | grep -E "(stun|turn|coturn|janus|kurento|webrtc|signaling)" | grep -v grep
netstat -tulpn | grep -E "(3478|5349|8080|8081|8088|8188|8989|80|443|10000)" | head -20
ss -tulpn | grep -E "(3478|5349|8080|8081|8088|8188|8989|80|443|10000)" | head -20
dpkg -l | grep -E "(coturn|janus|kurento|webrtc|stun|turn)" || echo "No WebRTC packages found via dpkg"

systemctl list-units --type=service --state=active | grep -E "(webrtc|stun|turn|coturn|janus|kurento|signaling)" || echo "No WebRTC-related systemd services found"
  aira.service                                   loaded active running AIRA app + signaling




Great! I found an AIRA service that includes signaling. Let me examine this service and check what's running on ports 80 and 443:
Let me find the service configuration and the server script:
Now let me check what's running on ports 80 and 443 and examine the aira application:
Let me examine the AIRA application directory and check for TURN server configuration:
Let me check if there's a TURN server running and examine nginx configuration:
cat /etc/nginx/sites-enabled/default | head -30
cat: /etc/nginx/sites-enabled/default: No such file or directory
Let me check if there are any other WebRTC-related services or check for a coturn installation:
Let me also check the package.json to understand the AIRA application dependencies:
Completed Check systemd services (3/6), Check listening ports (4/6), Examine configuration files (5/6), Check for custom WebRTC applications (6/6)





Great! I found an AIRA service that includes signaling. Let me examine this service and check what's running on ports 80 and 443:
systemctl status aira.service
Warning: The unit file, source configuration file or drop-ins of aira.service changed on disk. Run 'systemctl daemon-reload' to reload units.
● aira.service - AIRA app + signaling
     Loaded: loaded (/etc/systemd/system/aira.service; enabled; preset: enabled)
     Active: active (running) since Sat 2025-08-23 15:17:34 EDT; 16h ago
   Main PID: 541 (node)
      Tasks: 11 (limit: 1017)
     Memory: 26.9M (peak: 45.7M)
        CPU: 2.322s
     CGroup: /system.slice/aira.service
             └─541 /usr/bin/node server.cjs

Aug 23 15:17:34 ip-172-31-39-220 systemd[1]: Started aira.service - AIRA app + signaling.
Aug 23 15:17:48 ip-172-31-39-220 node[541]: Signaling listening on :3001
ss -tulpn | grep :3001
tcp   LISTEN 0      511                     *:3001            *:*    users:(("node",pid=541,fd=18))
Let me find the service configuration and the server script:
cat /etc/systemd/system/aira.service
[Unit]
Description=AIRA app + signaling
After=network.target

[Service]
WorkingDirectory=/home/ubuntu/aira-zoomish
ExecStart=/usr/bin/node server.cjs
Environment=PORT=3001
Environment=TURN_SECRET=d5ce87d42b01ca74a3054428d621b5cd8411a3a7287f48910e4d9fd348259a1f
Environment=TURN_HOST=turn.airahr.ai
Environment=TURN_REALM=turn.airahr.ai
Environment=TURN_TTL=3600
Restart=always
User=ubuntu
Group=ubuntu

[Install]
WantedBy=multi-user.target
Now let me check what's running on ports 80 and 443 and examine the aira application:
ss -tulpn | grep -E ":(80|443)" | head -10
tcp   LISTEN 0      511               0.0.0.0:80        0.0.0.0:*          
tcp   LISTEN 0      511               0.0.0.0:443       0.0.0.0:*          
ps aux | grep -E "(nginx|apache|httpd)" | grep -v grep
root         625  0.0  0.2  21660  2124 ?        Ss   Aug23   0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
www-data     626  0.0  0.8  24108  8044 ?        S    Aug23   0:00 nginx: worker process
www-data     627  0.0  0.8  24028  8184 ?        S    Aug23   0:00 nginx: worker process
ls -la /home/ubuntu/aira-zoomish/
total 212
drwxr-xr-x   4 ubuntu ubuntu  4096 Aug 23 20:44 .
drwxr-x---  16 ubuntu ubuntu  4096 Aug 24 07:31 ..
-rw-r--r--   1 ubuntu ubuntu    72 Aug 16 11:07 .gitignore
-rw-r--r--   1 ubuntu ubuntu  1554 Aug 16 11:07 README.md
-rw-rw-r--   1 ubuntu ubuntu  2565 Aug 22 15:42 bot-join.cjs
drwxr-xr-x   6 ubuntu ubuntu  4096 Aug 23 13:08 client
-rw-rw-r--   1 ubuntu ubuntu   366 Aug 17 13:19 ecosystem.config.js
-rw-rw-r--   1 ubuntu ubuntu   870 Aug 17 13:19 job-consumer.js
-rwxrwxr-x   1 ubuntu ubuntu   526 Aug 16 20:13 make_intro.sh
-rwxrwxr-x   1 ubuntu ubuntu   385 Aug 17 13:17 multi_rooms.sh
drwxrwxr-x 172 ubuntu ubuntu  4096 Aug 21 22:10 node_modules
-rw-rw-r--   1 ubuntu ubuntu 85035 Aug 21 22:10 package-lock.json
-rw-r--r--   1 ubuntu ubuntu   390 Aug 21 20:23 package.json
-rw-r--r--   1 ubuntu ubuntu  1061 Aug 16 11:07 room.html
-rwxrwxr-x   1 ubuntu ubuntu   256 Aug 22 11:00 run_bot.sh
-rwxrwxr-x   1 ubuntu ubuntu   258 Aug 22 13:18 run_bot1.sh
-rw-rw-r--   1 ubuntu ubuntu 13777 Aug 23 16:43 runner.cjs
-rw-rw-r--   1 ubuntu ubuntu 10814 Aug 23 12:28 runner.cjs.1
-rw-rw-r--   1 ubuntu ubuntu  9025 Aug 23 16:43 runner.cjs.screen_recording_working
-rw-rw-r--   1 ubuntu ubuntu  6467 Aug 22 19:11 server.cjs
-rw-rw-r--   1 ubuntu ubuntu  4286 Aug 21 19:21 server.cjs1
-rwxrwxr-x   1 ubuntu ubuntu   752 Aug 23 20:44 ssm_agent_config.sh
-rwxrwxr-x   1 ubuntu ubuntu   661 Aug 22 21:33 systemd.sh
-rw-rw-r--   1 ubuntu ubuntu  3369 Aug 21 21:14 webrtc-audio-monitor.cjs
-rw-rw-r--   1 ubuntu ubuntu     0 Aug 17 18:01 webrtc-room-3.err
head -50 /home/ubuntu/aira-zoomish/server.cjs
// server.cjs — app static + signaling + TURN REST creds + room state
const path = require('path');
const fs = require('fs');
const http = require('http');
const express = require('express');
const cors = require('cors');
const crypto = require('crypto');
const { Server } = require('socket.io');

const PORT        = process.env.PORT || 3001;
const TURN_SECRET = process.env.TURN_SECRET; // REQUIRED
const TURN_HOST   = process.env.TURN_HOST   || 'turn.airahr.ai';
const TURN_REALM  = process.env.TURN_REALM  || 'turn.airahr.ai';
const TURN_TTL    = parseInt(process.env.TURN_TTL || '3600', 10);
const STATUS_TOKEN= process.env.STATUS_TOKEN || '';

if (!TURN_SECRET) { throw new Error('env TURN_SECRET is required'); }

const app = express();
const srv = http.createServer(app);
const io  = new Server(srv, { cors: { origin: true, credentials: true } });

app.use(cors({ origin: true, credentials: true }));
app.use(express.json());
app.use(express.raw({ type: 'application/octet-stream', limit: '200mb' }));

// ---- static client (vite build) ----
const DIST = path.join(__dirname, 'client', 'dist');
if (fs.existsSync(DIST)) {
  app.use(express.static(DIST));
  app.get('/', (_req, res) => res.sendFile(path.join(DIST, 'index.html')));
}

// ---- TURN REST creds ----
app.get('/turn-credentials', (_req, res) => {
  const now = Math.floor(Date.now() / 1000);
  const exp = now + TURN_TTL;
  const username = `${exp}:browser`;
  const credential = crypto.createHmac('sha1', TURN_SECRET).update(username).digest('base64');
  res.json({
    username, credential, ttl: TURN_TTL, realm: TURN_REALM,
    iceServers: [
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: [`turn:${TURN_HOST}:3478?transport=udp`,`turn:${TURN_HOST}:3478?transport=tcp`], username, credential }
    ]
  });
});

// ---- tiny auth for status API ----
function statusAuth(req, res, next) {
Let me check if there's a TURN server running and examine nginx configuration:
ss -tulpn | grep 3478
systemctl list-units --type=service | grep -i turn
cat /etc/nginx/sites-enabled/default | head -30
cat: /etc/nginx/sites-enabled/default: No such file or directory
ls /etc/nginx/sites-enabled/
aira
cat /etc/nginx/sites-enabled/aira
# HTTP: redirect to HTTPS (keep ACME path)
server {
  listen 80;
  server_name aira.airahr.ai;

  location ^~ /.well-known/acme-challenge/ { root /var/www/html; }
  location / { return 301 https://$host$request_uri; }
}

# HTTPS: ALL paths -> :3001 (Node serves SPA + /socket.io + /turn-credentials)
server {
  listen 443 ssl http2;
  server_name aira.airahr.ai;

  ssl_certificate     /etc/letsencrypt/live/aira.airahr.ai/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/aira.airahr.ai/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  client_max_body_size 200M;

  # WebSocket upgrade for Socket.IO
  location /socket.io/ {
    proxy_pass http://127.0.0.1:3001/socket.io/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
    proxy_read_timeout 3600;
  }

  # Everything else (SPA, /turn-credentials, assets)
  location / {
    proxy_pass http://127.0.0.1:3001;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}

Let me check if there are any other WebRTC-related services or check for a coturn installation:
which turnserver coturn
find /etc -name "*turn*" -type f 2>/dev/null | head -10
nslookup turn.airahr.ai
Server:		127.0.0.53
Address:	127.0.0.53#53

Non-authoritative answer:
Name:	turn.airahr.ai
Address: 98.86.254.138

Let me also check the package.json to understand the AIRA application dependencies:
cat /home/ubuntu/aira-zoomish/package.json
{
  "name": "aira-zoomish",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "build:client": "cd client && npm i && npm run build",
    "dev": "node server.js"
  },
  "dependencies": {
    "express": "^4.21.2",
    "puppeteer": "^24.17.0",
    "socket.io": "^4.8.1"
  },
  "devDependencies": {
    "playwright": "^1.55.0"
  }
}
Completed Check systemd services (3/6), Check listening ports (4/6), Examine configuration files (5/6), Check for custom WebRTC applications (6/6)


#### WebRTC Services Analysis Summary

Based on my investigation of this Ubuntu VM, here's what I found regarding WebRTC-related services:

✅ Services Found:

#### 1. AIRA Signaling Server
•  Service: aira.service (systemd service)
•  Status: Active and running since Aug 23, 16+ hours uptime  
•  Process: Node.js application (/usr/bin/node server.cjs)
•  Port: 3001 (internal signaling server)
•  Description: Custom WebRTC signaling server for AIRA video calling application

#### 2. Web Server (Nginx)
•  Service: nginx reverse proxy
•  Status: Active and running
•  Ports: 80 (HTTP), 443 (HTTPS)
•  Domain: aira.airahr.ai
•  Configuration: Proxies all traffic to the Node.js signaling server on port 3001

📋 Configuration Details:

#### AIRA Service Configuration (/etc/systemd/system/aira.service):
[Unit]
Description=AIRA app + signaling
After=network.target

[Service]
WorkingDirectory=/home/ubuntu/aira-zoomish
ExecStart=/usr/bin/node server.cjs
Environment=PORT=3001
Environment=TURN_SECRET=d5ce87d42b01ca74a3054428d621b5cd8411a3a7287f48910e4d9fd348259a1f
Environment=TURN_HOST=turn.airahr.ai
Environment=TURN_REALM=turn.airahr.ai
Environment=TURN_TTL=3600
Restart=always
User=ubuntu
Group=ubuntu


#### Key Features:
•  Signaling Server: WebSocket-based signaling using Socket.IO
•  TURN Credentials: REST API endpoint (/turn-credentials) that generates temporary credentials
•  STUN Server: Uses Google's public STUN server (stun:stun.l.google.com:19302)
•  TURN Server: References external TURN server at turn.airahr.ai:3478

#### Nginx Configuration (/etc/nginx/sites-enabled/aira):
•  HTTP (80) → HTTPS redirect
•  HTTPS (443) → Proxies to Node.js on port 3001
•  WebSocket upgrade support for Socket.IO
•  SSL certificates via Let's Encrypt

❌ Services NOT Found:

#### TURN Server (Local)
•  Status: No local TURN server running on this VM
•  External: Uses external TURN server at turn.airahr.ai (IP: 98.86.254.138)
•  Ports: No local process listening on standard TURN ports (3478, 5349)

#### Dedicated STUN Server
•  Status: No local STUN server
•  Uses: Google's public STUN server

#### Other WebRTC Media Servers
•  No Janus, Kurento, or other WebRTC gateway servers found
•  Only basic audio processing library installed: libwebrtc-audio-processing1

🏗 Architecture Summary:

This VM serves as a WebRTC signaling server with the following architecture:

1. Client ↔ Nginx (443/80) ↔ Node.js Signaling Server (3001)
2. STUN/TURN: Uses external services (Google STUN + turn.airahr.ai TURN)
3. Media: Peer-to-peer WebRTC connections (no media server relay)

The setup is optimized for direct peer-to-peer WebRTC connections with minimal server-side media processing, using external STUN/TURN infrastructure for NAT traversal.




